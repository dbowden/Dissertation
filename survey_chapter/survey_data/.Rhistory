as.numeric(levels(spss$Fulfills_Elective))
as.numeric(levels(spss$Fulfills_Elective))[spss$Fulfills_Elective]
as.numeric(as.character(spss$Fulfills_Elective))
as.numeric(spss$Fulfills_Elective)
spss$sum <- as.numeric(spss$Fulfills_Elective) + as.numeric(spss$Fulfills_GeneralEducation)
spss$sum
View(spss)
as.numeric(spss$Reasons_Affordable)
library(haven)
spss <- read_spss("Z:/Private/Internal/Clients/IllinoisOnline/120168_IllinoisOnline_Fall2016/IllinoisOnline_120168.sav")
table(spss$Fulfills_Elective)
table(attr(spss$Fulfills_Elective), "labels")
attr(spss$Fulfills_Elective)
attr(spss$Fulfills_Elective, "labels")
table(attr(spss$Fulfills_Elective, "labels"))
table(as.factor(spss$Fulfills_Elective))
table(spss$Fulfills_Elective)
?table
install.packages("rio")
library(rio)
install.packages("openxlsx")
levels(spss$Fulfills_Elective)
spss$Fulfills_Elective_factor <- factor(spss$Fulfills_Elective, labels = attr(spss$Fulfills_Elective, "labels"))
str(spss$Fulfills_Elective)
attr(spss$Fulfills_Elective, "labels")
attr(spss$Fulfills_Elective, "names")
table(as.factor(spss$Fulfills_Elective))
table(as.factor(spss$Fulfills_Elective, labels=attr(spss$Fulfills_Elective, "labels")))
?factor
attr(spss$Fulfills_Elective, "labels")
x = attr(spss$Fulfills_Elective, "labels")
x
?read_dta
labelled(spss$Fulfills_MajorCourse, attr(spss$Fulfills_MajorCourse, "labels"))
table(labelled(spss$Fulfills_MajorCourse, attr(spss$Fulfills_MajorCourse, "labels")))
table(factor(spss$Fulfills_Elective, levels=attr(spss$Fulfills_Elective, "labels")))
x
str(x)
table(factor(spss$Fulfills_Elective, levels=attr(spss$Fulfills_Elective, "labels"), labels=attr(spss$Fulfills_Elective, "labels")))
install.packages("Lahman")
library(Lahman)
Label(spss$Fulfills_Elective)
spss$Fulfills_Elective
install.packages("sjmisc")
library(sjmisc)
tabel(to_label(spss$Fulfills_Elective))
table(to_label(spss$Fulfills_Elective))
library(sjmisc)
afro <- read_spss("C:/Users/dbowden2/Dropbox/Dissertation/Analyses/survey_chapter/afrobarometer_2016.sav")
View(afro)
acled <- read.csv("C:/Users/dbowden2/Dropbox/Dissertation/Analyses/survey_chapter/ACLED-Version-7-All-Africa-1997-2016_csv_dyadic-file.csv")
View(acled)
table(afro$LOCATION.LEVEL.1 %in% acled$ADMIN1)
table(afro$LOCATION.LEVEL.1 %in% acled$ADMIN2)
table(afro$LOCATION.LEVEL.1 %in% acled$ADMIN3)
table(afro$LOCATION.LEVEL.1 %in% acled)
acled[,18]
colnames(acled)[21]
colnames(acled)[16:19]
table(afro$LOCATION.LEVEL.1 %in% acled[,16:19])
table(afro$LOCATION.LEVEL.1 %in% acled$ADMIN1 | afro$LOCATION.LEVEL.1 %in% acled$ADMIN2 | afro$LOCATION.LEVEL.1 %in% acled$ADMIN3)
table(afro$LOCATION.LEVEL.1 %in% acled$ADMIN1 | afro$LOCATION.LEVEL.1 %in% acled$ADMIN2 | afro$LOCATION.LEVEL.1 %in% acled$ADMIN3 | afro$LOCATION.LEVEL.1 %in% acled$LOCATION)
View(afro)
head(to_label(afro$REGION))
table(to_label(afro$REGION) %in% acled$ADMIN1)
table(to_label(afro$REGION) %in% acled$ADMIN1 | to_label(afro$REGION) %in% acled$ADMIN2)
table(to_label(afro$REGION) %in% acled$ADMIN1 | to_label(afro$REGION) %in% acled$ADMIN2 | to_label(afro$REGION) %in% acled$ADMIN3)
table(to_label(afro$REGION) %in% acled$ADMIN1 | to_label(afro$REGION) %in% acled$ADMIN2 | to_label(afro$REGION) %in% acled$LOCATION)
gss <- read_spss("C:/Users/dbowden2/Downloads/SPSS II Inferential Statistics.sav")
library(sjmisc)
gss <- read_spss("C:/Users/dbowden2/Downloads/SPSS II Inferential Statistics.sav")
get_label(gss$postlife)
?set_labels
table(to_label(gss$mapres80))
table(to_label(gss$wrkstat))
gss$wrkstat_recode <- ifelse(gss$wrkstat < 4, 1, 2)
table(gss$wrkstat)
gss$wrkstat_recode <- set_labels(gss$wrkstat_recode, c("In the Labor Force", "Not in the Labor Force"))
gss$wrkstat_recode <- set_labels(gss$wrkstat_recode, labels=c("In the Labor Force", "Not in the Labor Force"))
table(to_label(gss$wrkstat_recode))
get_labels(gss$sex)
gss$sex <- set_labels(gss$sex, labels=c("Male", "Female"))
get_labels(gss$sex)
gss <- read_spss("C:/Users/dbowden2/Downloads/SPSS II Inferential Statistics.sav")
get_labels(gss$sex)
gss$sex <- set_labels(gss$sex, labels=c("Male", "Female"))
get_labels(gss$sex)
gss$postlife <- get_label(gss$postlife)
get_label(gss$postlife)
gss <- read_spss("C:/Users/dbowden2/Downloads/SPSS II Inferential Statistics.sav")
get_label(gss$postlife)
set_label(gss$postlife, label="Belief in life after death")
get_label(gss$postlife)
gss$postlife <- set_label(gss$postlife, label="Belief in life after death")
get_label(gss$postlife)
gss[,c("sex", "postlife")] <- set_label(gss[,c("sex","postlife")], label=c("Respondent's sex", "Belief in life after death"))
get_label(gss$sex)
get_label(gss$postlife)
gss <- set_label(gss, label="GSS variables")
flat_table(gss$sex)
frq(gss$sex)
gss <- read_spss("C:/Users/dbowden2/Downloads/SPSS II Inferential Statistics.sav")
frq(gss$postlife)
descr(gss$postlife)
gss$postlife <- add_labels(gss$postlife, values = c(`NA` = 8))
gss$postlife <- add_labels(gss$postlife, value = c(`NA` = 8))
frq(gss$postlife)
gss <- read_spss("C:/Users/dbowden2/Downloads/SPSS II Inferential Statistics.sav")
gss$postlife <- add_labels(gss$postlife, value = c(NA = 8))
gss$postlife <- add_labels(gss$postlife, value = c('NA' = 8))
library(dplyr)
library(readr)
mids <- read_csv("C:/Users/dbowden2/Downloads/MIDB_4.01.csv")
View(mids)
mids$id <- seq(1:nrow(mids))
mids.yearly <- mids %>%
group_by(id) %>%
do(data.frame(id=.$id, year=seq(.$StYear, .$EndYear)))
mids <- left_join(mids.yearly, mids)
rm(mids.yearly)
# Convert to dyadic-MID-years (1 obs per dyadic MID per year) ----
#remove a few unneccesary variables
mids <- select(ungroup(mids), -id, -DispNum4, -Version)
midsa <- filter(mids, SideA == 1)
midsb <- filter(mids, SideA == 0)
#merge the A and B side participants by dispute number and year
#suffix will label the columns for side A and B
mids.dyadic <- full_join(midsa, midsb, by=c("DispNum3","year"), suffix=c("_A", "_B"))
table(is.na(mids.dyadic$StAbb_A))
table(is.na(mids.dyadic$StAbb_B))
?full_join
library(dplyr)
#import the participant-level MIDs data
#the na.strings option will make sure R understands -9 as a missing value
mids <- read.csv("~/Downloads/MID-level/MIDB_4.01.csv", na.strings = "-9")
# Convert to yearly data ----
mids$id <- seq(1:nrow(mids))
mids.yearly <- mids %>%
group_by(id) %>%
do(data.frame(id=.$id, year=seq(.$StYear, .$EndYear)))
mids <- left_join(mids.yearly, mids)
rm(mids.yearly)
mids <- read.csv("C:/Users/dbowden2/Downloads//MIDB_4.01.csv", na.strings = "-9")
library(dplyr)
#import the participant-level MIDs data
#the na.strings option will make sure R understands -9 as a missing value
mids <- read.csv("C:/Users/dbowden2/Downloads/MIDB_4.01.csv", na.strings = "-9")
# Convert to yearly data ----
mids$id <- seq(1:nrow(mids))
mids.yearly <- mids %>%
group_by(id) %>%
do(data.frame(id=.$id, year=seq(.$StYear, .$EndYear)))
mids <- left_join(mids.yearly, mids)
rm(mids.yearly)
mids <- select(ungroup(mids), -id, -DispNum4, -Version)
#split into separate files for Side A and B participants
midsa <- filter(mids, SideA == 1)
midsb <- filter(mids, SideA == 0)
mids.dyadic <- full_join(midsa, midsb, by=c("DispNum3","year"), suffix=c("_A", "_B"))
mids.dyadic2 <- merge(midsa, midsb, by=c("DispNum3", "year"), suffixes = c("_A", "_B"), all=T)
mids.dyadic2 <- merge(midsa, midsb, by=c("DispNum3", "year"), suffixes = c("_A", "_B"), all.x=T, all.y=T)
table(is.na(mids.dyadic$ccode_A))
table(is.na(mids.dyadic$ccode_B))
rm(mids.dyadic2)
View(mids.dyadic)
library(dplyr)
#import the participant-level MIDs data
#the na.strings option will make sure R understands -9 as a missing value
mids <- read.csv("C:/Users/dbowden2/Downloads/MIDB_4.01.csv", na.strings = "-9")
# Convert to yearly data ----
mids$id <- seq(1:nrow(mids))
mids.yearly <- mids %>%
group_by(id) %>%
do(data.frame(id=.$id, year=seq(.$StYear, .$EndYear)))
mids <- left_join(mids.yearly, mids)
rm(mids.yearly)
# Convert to dyadic-MID-years (1 obs per dyadic MID per year) ----
#remove a few unneccesary variables
mids <- select(ungroup(mids), -id, -DispNum4, -Version, -StDay, StMon, StYear, EndDay, EndMon, EndYear)
#split into separate files for Side A and B participants
midsa <- filter(mids, SideA == 1)
midsb <- filter(mids, SideA == 0)
#merge the A and B side participants by dispute number and year
#suffix will label the columns for side A and B
mids.dyadic <- full_join(midsa, midsb, by=c("DispNum3","year"), suffix=c("_A", "_B"))
rm(mids, midsa, midsb)
View(mids.dyadic)
library(dplyr)
#import the participant-level MIDs data
#the na.strings option will make sure R understands -9 as a missing value
mids <- read.csv("C:/Users/dbowden2/Downloads/MIDB_4.01.csv", na.strings = "-9")
mids$id <- seq(1:nrow(mids))
mids.yearly <- mids %>%
group_by(id) %>%
do(data.frame(id=.$id, year=seq(.$StYear, .$EndYear)))
mids <- left_join(mids.yearly, mids)
rm(mids.yearly)
mids <- select(ungroup(mids), -id, -DispNum4, -Version, -StDay, StMon, StYear, EndDay, EndMon, EndYear)
mids <- read.csv("C:/Users/dbowden2/Downloads/MIDB_4.01.csv", na.strings = "-9")
# Convert to yearly data ----
mids$id <- seq(1:nrow(mids))
mids.yearly <- mids %>%
group_by(id) %>%
do(data.frame(id=.$id, year=seq(.$StYear, .$EndYear)))
mids <- left_join(mids.yearly, mids)
rm(mids.yearly)
# Convert to dyadic-MID-years (1 obs per dyadic MID per year) ----
#remove a few unneccesary variables
mids <- select(ungroup(mids), -id, -DispNum4, -Version, -StDay, -StMon, -StYear, -EndDay, -EndMon, -EndYear)
#split into separate files for Side A and B participants
midsa <- filter(mids, SideA == 1)
midsb <- filter(mids, SideA == 0)
#merge the A and B side participants by dispute number and year
#suffix will label the columns for side A and B
mids.dyadic <- full_join(midsa, midsb, by=c("DispNum3","year"), suffix=c("_A", "_B"))
rm(mids, midsa, midsb)
View(mids.dyadic)
sub <- select(mids.dyadic, DispNum3, year, ccode_A, ccode_B)
table(duplicated(sub))
table(is.na(sub$ccode_A))
table(is.na(sub$ccode_B))
library(dplyr)
#import the participant-level MIDs data
#the na.strings option will make sure R understands -9 as a missing value
mids <- read.csv("C:/Users/dbowden2/Downloads/MIDB_4.01.csv", na.strings = "-9")
# Convert to yearly data ----
mids$id <- seq(1:nrow(mids))
mids.yearly <- mids %>%
group_by(id) %>%
do(data.frame(id=.$id, year=seq(.$StYear, .$EndYear)))
mids <- left_join(mids.yearly, mids)
rm(mids.yearly)
# Convert to dyadic-MID-years (1 obs per dyadic MID per year) ----
#remove a few unneccesary variables
mids <- select(ungroup(mids), -id, -DispNum4, -Version, -StDay, -StMon, -StYear, -EndDay, -EndMon, -EndYear)
#split into separate files for Side A and B participants
midsa <- filter(mids, SideA == 1)
midsb <- filter(mids, SideA == 0)
n_distinct(midsa$DispNum3)
n_distinct(midsa$DispNum3, midsa$year)
library(dplyr)
#import the participant-level MIDs data
#the na.strings option will make sure R understands -9 as a missing value
mids <- read.csv("C:/Users/dbowden2/Downloads/MIDB_4.01.csv", na.strings = "-9")
table(is.na(mids$DispNum3))
table(is.na(mids$ccode))
mids$id <- seq(1:nrow(mids))
mids.yearly <- mids %>%
group_by(id) %>%
do(data.frame(id=.$id, year=seq(.$StYear, .$EndYear)))
mids <- left_join(mids.yearly, mids)
rm(mids.yearly)
mids <- select(ungroup(mids), -id, -DispNum4, -Version, -StDay, -StMon, -StYear, -EndDay, -EndMon, -EndYear)
midsa <- filter(mids, SideA == 1)
midsb <- filter(mids, SideA == 0)
mids.dyadic <- full_join(midsa, midsb, by=c("DispNum3","year"), suffix=c("_A", "_B"))
mids.dyadic <- full_join(midsa, midsb, by=c("DispNum3","year"), suffix=c("_A", "_B"))
mids.dyadic <- inner_join(midsa, midsb, by=c("DispNum3","year"), suffix=c("_A", "_B"))
library(dplyr)
#import the participant-level MIDs data
#the na.strings option will make sure R understands -9 as a missing value
mids <- read.csv("C:/Users/dbowden2/Downloads/MIDB_4.01.csv", na.strings = "-9", stringsAsFactors = F)
# Convert to yearly data ----
mids$id <- seq(1:nrow(mids))
mids.yearly <- mids %>%
group_by(id) %>%
do(data.frame(id=.$id, year=seq(.$StYear, .$EndYear)))
mids <- left_join(mids.yearly, mids)
rm(mids.yearly)
# Convert to dyadic-MID-years (1 obs per dyadic MID per year) ----
#remove a few unneccesary variables
mids <- select(ungroup(mids), -id, -DispNum4, -Version, -StDay, -StMon, -StYear, -EndDay, -EndMon, -EndYear)
mids$key <- paste(mids$DispNum3, mids$year, sep="-")
midsa <- filter(mids, SideA == 1)
#midsa <- arrange(midsa, DispNum3, year)
midsb <- filter(mids, SideA == 0)
mids.dyadic <- full_join(midsa, midsb, by="key", suffix=c("_A", "_B"))
library(rgdal)
library(gdalUtils)
library(raster)
counties <- readOGR("C:/Users/dbowden2/Downloads/cb_2016_us_county_20m.shp")
#subset to KS
counties <- counties[counties@data$STATEFP==20,]
plot(counties)
counties@bbox
install.packages("ndvits")
cover <- readGDAL("C:/Users/dbowden2/Downloads/gaplandcov_ri/gaplndcov_RI.img", )
counties <- readOGR("C:/Users/dbowden2/Downloads/cb_2016_us_county_20m.shp")
counties <- counties[counties@data$STATEFP==44,]
plot(counties)
plot(cover)
table(cover@data$band1)
cr <- crop(cover, counties)
counties@proj4string
cover <- spTransform(cover, "+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0")
cr <- crop(cover, counties)
plot(cr)
cr <- crop(raster(cover), raster(counties))
plot(cr)
cover <- raster("C:/Users/dbowden2/Downloads/gaplandcov_ri/gaplndcov_RI.img", )
plot(counties)
counties@proj4string
cover@proj4string
plot(cover)
cover <- readGDAL("C:/Users/dbowden2/Downloads/gaplandcov_ri/gaplndcov_RI.img", )
plot(cover)
cover <- spTransform(cover, "+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0")
table(cover@data$band1)
plot(cover)
plot(cover)
cover <- readGDAL("C:/Users/dbowden2/Downloads/gaplandcov_ri/gaplndcov_RI.img", )
cover <- spTransform(cover, crs(counties))
cover <- readGDAL("C:/Users/dbowden2/Downloads/gaplandcov_ri/gaplndcov_RI.img", )
cover2 <- projectRaster(cover, crs(counties))
cover2 <- projectRaster(cover, crs=crs(counties))
cover2 <- projectRaster(cover, crs=CRS(crs(counties)))
counties <- readOGR("C:/Users/dbowden2/Downloads/cb_2016_us_county_20m.shp")
#subset to RI
counties <- counties[counties@data$STATEFP==44,]
plot(counties)
counties2 <- spTransform(counties, CRS("+init=epsg:4326"))
plot(counties2)
cover <- readGDAL("C:/Users/dbowden2/Downloads/gaplandcov_ri/gaplndcov_RI.img", )
plot(cover)
cover2 <- spTransform(cover, CRS("+init=epsg:4326"))
counties2 <- spTransform(counties, crs(cover))
plot(counties2)
cr <- crop(cover, counties)
counties2 <- spTransform(counties, CRS(crs(cover)))
cover@proj4string
counties2 <- spTransform(counties, crs(cover))
cr <- crop(cover, counties2)
plot(counties2)
cr <- crop(cover, counties2)
url<-"http://qgis.org/downloads/data/qgis_sample_data.zip"
download.file(url)
download.file(url, "C:/Users/dbowden2/Downloads/")
nigeria <- read.csv("C:/Users/dbowden2/Downloads/Nigeria.csv")
View(nigeria)
unique(nigeria$EVENT_TYPE)
unique(nigeria$ADMIN1)
nigeria <- subset(nigeria, EVENT_TYPE=="Riots/Protests")
write.csv(nigeria, "C:/Users/dbowden2/Downloads/Nigeria.csv", row.names = F)
data <- read.delim("C:/Users/dbowden2/Downloads/ICPSR_06572/DS0001/06572-0001-Data.txt")
View(data)
wdi <- read.csv("C:/Users/dbowden2/Downloads/Data_Extract_From_World_Development_Indicators/wdi.csv")
View(wdi)
library(tidyr)
install.packages("WDI")
library(WDI)
WDIsearch(string="gdp")
WDIsearch(string="gdp growth")
growth <- WDI(country="all", indicator = "NY.GDP.MKTP.KD.ZG", start=1970, end=2016)
View(growth)
growth$cow <- countrycode::countrycode(growth$iso2c, "iso2c", "cown")
View(growth)
growth <- subset(growth, !is.na(cow))
WDIsearch("corruption")
WDIsearch("oil")
corruption <- WDI(country="all", indicator="Oil rents (% of GDP)", start=1970, end)
corruption <- WDI(country="all", indicator="Oil rents (% of GDP)", start=1970, end=2016)
WDIsearch("exports")
View(growth)
forecast <- read.csv("C:/Users/dbowden2/Downloads/president_general_polls_2016.csv")
View(forecast)
obama <- read.delim("C:/Users/dbowden2/Downloads/00c -Pres-44-Obama - Job Approval - National-poll-responses-clean.tsv")
View(obama)
obama$num_approve <- (obama$Approve/100) * observations
obama$num_approve <- (obama$Approve/100) * obama$observations
View(obama)
obama$num_disapprove <- (obama$Disapprove/100) * obama$observations
obama$num_undecided <- obama$observations - obama$num_approve - obama$num_disapprove
View(obama)
summary(obama$num_undecided)
table((obama$Approve + obama$Disapprove)==T)
obama$num_undecided <- (obama$Undecided/100) * obama$observations
library(lubridate)
install.packages("yearmon")
obama$month <- mont(ymd(obama$end_date))
obama$month <- month(ymd(obama$end_date))
obama$year <- year(ymd(obama$end_date))
obama$ym <- paste(obama$year, obama$month, sep="-")
library(dplyr)
monthly <- obama %>%
group_by(ym) %>%
summarize(num_approve=sum(num_approve), num_disapprove=sum(num_disapprove), num_undecided=sum(num_undecided), polls=n())
View(monthly)
View(obama)
?mean
monthly <- obama %>%
group_by(ym) %>%
summarize(approve=weighted.mean(Approve, observations, na.rm=T))
View(monthly)
View(obama)
summary(obama$Approve)
monthly <- obama %>%
group_by(ym) %>%
summarize(approve=weighted.mean(x=Approve, w=observations, na.rm=T))
View(monthly)
monthly <- obama %>%
group_by(ym) %>%
summarize(approve=mean(Approve, na.rm=T))
View(monthly)
plot(monthly$ym, monthly$approve)
monthly <- obama %>%
group_by(year, month) %>%
summarize(approve=mean(Approve, na.rm=T))
View(monthly)
obama$ym <- paste(obama$ym, 1, sep="-")
View(obama)
obama$ym <- ymd(paste(obama$ym, 1, sep="-"))
obama$ym <- ymd(obama$ym)
obama$month <- month(ymd(obama$end_date))
obama$year <- year(ymd(obama$end_date))
obama$ym <- paste(obama$year, obama$month, sep="-")
obama$ym <- paste(obama$ym, 1, sep="-")
View(obama)
obama$ym <- ymd(as.factor(obama$ym))
monthly <- obama %>%
group_by(ym) %>%
summarize(approve=mean(Approve, na.rm=T))
plot(monthly$ym, monthly$approve)
plot(monthly$ym, monthly$approve, type="l")
summary(obama$observations)
monthly <- obama %>%
group_by(ym) %>%
summarize(approve=weighted.mean(Approve, observations,na.rm=T))
View(monthly)
monthly <- obama %>%
group_by(ym) %>%
summarize(approve=mean(Approve, na.rm=T), disapprove=mean(Disapprove, na.rm=T))
View(monthly)
monthly <- obama %>%
group_by(ym) %>%
summarize(approve=mean(Approve, na.rm=T), disapprove=mean(Disapprove, na.rm=T), undecided=mean(Undecided, na.rm=T))
monthly$net <- monthly$approve - monthly$disapprove
plot(monthly$ym, monthly$net)
plot(monthly$ym, monthly$net, type="l")
unemp <- read.csv("C:/Users/dbowden2/Downloads/FRED_unemployment.csv")
View(unemp)
colnames(unemp) <- c("ym", "unemployment")
merged <- merge(obama, unemp, by="ym", all.x=T, all.y=T)
merged <- merge(monthly, unemp, by="ym", all.x=T, all.y=T)
View(merged)
unemp$ym <- ymd(unemp$ym)
merged <- merge(monthly, unemp, by="ym", all.x=T, all.y=T)
plot(merged$ym, merged$unemployment)
plot(merged$ym, merged$unemployment, type="l")
write.csv(monthly, file="C:/Users/dbowden2/Downloads/obama_monthly.csv", row.names = F)
obama <- read.csv("C:/Users/dbowden2/Downloads/obama_monthly.csv")
unemp <- read.csv("C:/Users/dbowden2/Downloads/FRED_unemployment.csv)
""
)
unemp <- read.csv("C:/Users/dbowden2/Downloads/FRED_unemployment.csv")
obama <- read.csv("C:/Users/dbowden2/Downloads/obama_monthly.csv")
unemp <- read.csv("C:/Users/dbowden2/Downloads/FRED_unemployment.csv")
colnames(unemp)[1] <- "ym"
merged <- merge(obama, unemp, by="ym", all.x=T, all.y=F)
colnames(obama)
colnames(unemp)
unemp <- read.csv("C:/Users/dbowden2/Downloads/FRED_unemployment.csv")
colnames(unemp)
str(obama$ym)
str(unemp$ym)
colnames(unemp)[1] <- "ym"
str(unemp$ym)
?format
??format.Date
?merge
library(sjmisc)
install.packages("sjmisc")
library(sjmisc)
online <- read_spss("Z:/Private/Internal/Clients/IllinoisOnline/120168_IllinoisOnline_Fall2016/IllinoisOnline_120168.sav")
View(online)
head(online$MostHelpful)
load("merged_afrobarometer.Rds")
setwd("C:/Users/dbowden2/Dropbox/Dissertation/Document/survey_chapter/survey_data")
load("merged_afrobarometer.Rds")
h4 <- glmer(vote_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h5 <- glmer(meeting_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + primary + educ_recode + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h6 <- glmer(protest_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h7 <- glmer(violence_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h8 <- glmer(violence_willing ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1|Year), data=afro, family=binomial("logit"), weights=withinwt)
# Ethnic identity models ----
h1 <- glmer(eth_id_bin ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country), data=afro, family=binomial("logit"), weights=withinwt)
h2 <- glmer(eth_id_bin ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic), data=afro, family=binomial("logit"), weights=withinwt)
h3 <- glmer(eth_id_bin ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country/Ethnic) + (1|Year), data=subset(afro, !is.na(Ethnic)), family=binomial("logit"), weights=withinwt)
library(lme4)
install.packages("lme4")
h4 <- glmer(vote_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h5 <- glmer(meeting_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + primary + educ_recode + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h6 <- glmer(protest_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h7 <- glmer(violence_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h8 <- glmer(violence_willing ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1|Year), data=afro, family=binomial("logit"), weights=withinwt)
# Ethnic identity models ----
h1 <- glmer(eth_id_bin ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country), data=afro, family=binomial("logit"), weights=withinwt)
h2 <- glmer(eth_id_bin ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic), data=afro, family=binomial("logit"), weights=withinwt)
h3 <- glmer(eth_id_bin ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country/Ethnic) + (1|Year), data=subset(afro, !is.na(Ethnic)), family=binomial("logit"), weights=withinwt)
library(lme4)
h4 <- glmer(vote_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h5 <- glmer(meeting_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + primary + educ_recode + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h6 <- glmer(protest_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h7 <- glmer(violence_recode ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1 | Year), data=afro, family=binomial("logit"), weights=withinwt)
h8 <- glmer(violence_willing ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic) + (1|Year), data=afro, family=binomial("logit"), weights=withinwt)
# Ethnic identity models ----
h1 <- glmer(eth_id_bin ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country), data=afro, family=binomial("logit"), weights=withinwt)
h2 <- glmer(eth_id_bin ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country / Ethnic), data=afro, family=binomial("logit"), weights=withinwt)
h3 <- glmer(eth_id_bin ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country/Ethnic) + (1|Year), data=subset(afro, !is.na(Ethnic)), family=binomial("logit"), weights=withinwt)
h3 <- glmer(eth_id_bin ~ latentmean + I(ethfrac^2) + ethfrac + polity2 + separatist + civil + attack_recode_bin + intim_recode_bin  + employment_recode + primary + urban_recode + ruling_supporter + lage + sex +  (1 | Country/Ethnic) + (1|Year), data=afro, family=binomial("logit"), weights=withinwt)
save.image(file="survey_models.Rdata")
rm(afro)
save.image(file="survey_models.Rdata")
